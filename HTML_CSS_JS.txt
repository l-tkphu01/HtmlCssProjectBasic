*Cần học được gì và làm được gì trong khóa học (HTML_CSS_JS).

- xây dựng được giao diện website
- phân tích giao diện website
- đặt tên class theo tiêu chuẩn BEM
- xây dựng layout với Flexbox
- làm hiệu ứng với animation
- xây dựng giao diện responsive (dạo diện thích ứng, tạo ra giao diện trải nghiệm tốt cho người dùng khi truy cập vào nhìu
loại thiết bị khác nhau, ví dụ về thích ứng với điện thoại, máy tính bảng)
- rất nhiều các kĩ năng nâng cao khác.

- sử dụng rất rộng rãi trong các giao diện website.
-----------------------------------------------------------------
*HTML_CSS là gì? | ví dụ trực quan về HTML và CSS.

HTML là chữ viết tắt của "Hypertext Markup Language" (ngôn ngữ đánh dấu siêu văn bản). Nó giúp cho người dùng tạo và cấu trúc các thành phần trong trang web hoặc ứng dụng
phân chia các đoạn văn, heading (phần mở đầu), links, blockquotes (trích dẫn hình ảnh, video), vv.... (nguyên vật liệu, khung sườn để xây nhà).

CSS là ngôn ngữ tạo (phong cách) cho trang web - Cascading Style Sheet language. Nó dùng để tạo phong cách và định kiểu cho những yếu tố
được viết dưới dạng ngôn ngữ đánh dấu, như HTML.

-----------------------------------------------------------------

*Dev - tools.

- Element: chứa tất cả các phần tử của chúng ta (những phần tử HTML).
- stype: hiện thị ra những thuộc tính CSS (để tạo phong cách cho trang web).
- console: khi dùng để code javascrip 
- sources: để chúng ta biết được là chúng ta đã sử lí được những nguồn tài nguyên nào.
- nextwork: những tài nguyên khi ta tải từ những tap bên ngoài ví dụ (hình ảnh,...)
- toggle device toolbar: chuyển đổi mô phỏng trang web đó sang điện thoại (laptop)...để code phù hợp cho màn hình từng đt.
những website hình mây: là những website bên ngoài.

-----------------------------------------------------------------

*cấu trúc cơ bản của một file (html): 

- page ruler: đo kích thước của một thành phần nào đó trong trang web của chúng ta.
- khi trong thẻ body "<" sẽ lỗi vì nhận nhầm là thẻ mở.

-----------------------------------------------------------------

*CÁCH SỬ DỤNG CSS TRONG THẺ HTML.

có 3 cách: Internal (bên trong), External, Inline

Internal: (bên trong thẻ stype): bao gồm color, font-size, 
- đặt bất cứ đâu cũng được nma lưu ý kh được đặt ở giữa mấy cái chữ là được.
- sử dụng một cặp thẻ style đặt trong html của chúng ta và viết css vào đó
External: 
- để bỏ liên kết ra bên ngoài hàm (main.css) dùng External. dẫn liên kết vào index.html
để kiểm tra main.css đã được liên kết với tệp html chưa nhấn chuột phải chọn kiểm tra sau đó nhấn vào source.
Inline:
- thêm màu sắc trực tiếp vào các thẻ ví dụ <h1 Style<>phú đẹp trai quá trời</h1>

-----------------------------------------------------------------

*KHÁI NIỆM ID VÀ CLASS TRONG CSS SELECTORS
- cách để gọi được tới những cái element trong thẻ html
- lưu ý: khi học javascrip sử dụng 2 id trung nhau sẽ kh select được.

-----------------------------------------------------------------

*XÉT SỰ ƯU TIÊN TRONG CSS
priority?

1. Internal, External? : kh ai ưu tiên hơn cách nào(ông nào được gọi sau thì ông đó ms hơn và đc ưu tiên hơn)
2. Inline - 1000   những css này: cái nào mà được gọi nhiều điểm hơn thì sẽ được ưu tiên hơn.
3. #id - 100
4. .class - 10
5. tag - 1 <là những thẻ h1 - h6>
6. Equal specificity?
- có nghĩa là gọi heading-id... lại 1 lần nữa (thk nào viết trước, lớn hơn thì sẽ được ưu tiên).
7. Universal (0 điểm) selector and inherited (kế thừa: thừa hưởng từ những thk khác)? 0 điểm

important: khi xuất hiện thì đặc biệt ưu tiên ví dụ: 
li { //li: list, ul: unorder list
    color: black !important;
}

*CSS Variable là gì? (kĩ thuật đặc biến trong css).

:root { 
    --text-color: violet; 
}

/* kĩ thuật local */
h1 {
    --my-color: green;
    color: var(--my-color);
}

h2 {
    color: var(--my-color);
}

h3 {
    color: var(--text-color);
}

-----------------------------------------------------------------

*Abolute units? : đơn vị tuyệt đối.
. px: độ phân giải trên màn hình, điểm ảnh trên màn hình.
1px/ css tương ứng với 1 điểm ảnh thực trên màn hình độ phân giải thấp, đối với độ phân giải cao, 1 px tương ứng với nhiều 
điểm ảnh thực hơn 
. priority
. cm
. mm
. inch
. pc

-----------------------------------------------------------------

*Relative units? : đơn vị tương đối
. % : phụ thuộc vào thử chứa nó.
. rem: phụ thuộc thẻ html
. em: phụ thuộc vào thẻ gần nhất chứa nó (lần lượt duyệt qua các thẻ div, body, html, thẻ nào có thuộc tính font-size).
nên là khi ta thay đổi html: 1000px đi nữa cx không thay đổi đơn vị 1em.

-----------------------------------------------------------------

*khuyến khích sử dụng: rem (vì nó phụ thuộc vào html dễ kiểm soát hơn)
. vw: viewport - width: chiều ngang.
. vh: viewport - height: chiều dọc.
. vmin
. vmax
. ex
. ch

+ muốn chiều rộng và chiều ngang luôn bằng với màn hình thì dùng vw, vh.
+ muốn chiều ngang tỉ lệ với một đối tượng chứa nó thì sử dụng %

*Lưu ý: khi sử dụng màu sắc để css cho các phong chữ đặc nó trong <style>
</style>


*để tạo ô màu(hình vuông): 
<style>
            .box {
                width: 100px;
                height: 100px;
                background-color: red;
            }
 </style>

//phải có một thẻ div trong phần thân body:
<div class="box"></div>

-----------------------------------------------------------------

*thuộc tính Padding trong CSS|CSS padding.

 display: flex; //đặt các chữ nằm trên hàng ngang.
 align-items: center;
 align-items: flex-end; đặt ngược chiều từ dưới lên 
 align-items: flex-start: từ trên xuống 

 justify-content: center;
 justify-content: space-between; //có chức năng dùng để căn giữa, trái phải,...dựa trên thuộc tính display-flex.
- căn giữa chữ ra cái hình màu.

-----------------------------------------------------------------

*sơ đồ khối của element trong html
+padding: đệm
+boder: lớp viền ngoài cùng ôm element
margin: 

 /* padding-top: 10px;
    padding-right: 10px;
    padding-left: 10px;
    padding-bottom: 10px; */
    có thể viết tắc là: padding: 10px 12px 8px 6px (trên, phải, dưới, trái);
+ chức năng các thứ đều tương tự.
+dashed: nét đứt.
+solid: nét liền.
+inherit: thừa kế
+initial: giá trị ban đầu
+none: (không xét boder, còn tất cả những thk khác thì xét boder bình thường)

*cách viết tắt của boder:
border-width: 10px = border-top-width: 10px
                   = boder-right-width: 10px
                   = boder-bottom-width: 10px
                   = border-left-width: 10px

-----------------------------------------------------------------

* Thuộc tính margin trong CSS.(TƯ DUY SỬ DỤNG CSS MARGIN)
- muốn tạo ra khoảng cách đẩy box2, box3 xa nhau ra
-float-left: giúp cho tất cả các element nằm trên một mặt ngang: 

-----------------------------------------------------------------

*CSS box-sizing(tính ứng dụng của box-sizing): được sử dụng để kiểm soát cách kích thước của phần tử(element) được tính toán
quyết định padding và border.

-box-sizing: unset; có tác dụng hủy đi các thao tác vừa đề cập.

-----------------------------------------------------------------

*CSS background-clip(thuộc tính background-clip)
- giúp kiểm soát phạm vi vẽ nền của phần tử tương ứng với border và padding thì sẽ có giới hạn tương xứng

-----------------------------------------------------------------

*CSS background-image.
- background-size: 100px; (xét theo chìu ngang(width))còn chìu dọc thì auto chỉnh lại size kích thước của ảnh.
- background-repeat: no-repeat; mất đi thuộc tính lặp lại.
- background-repeat: repeat-x; lặp chiều dọc
- background-repeat: repeat-y; bỏ lặp.
- background-image: url(--thêm ảnh link vào đây--); link nào trước thì hiện trước.
- background-image: linear-gradient(--thêm tham số vào--); dải màu truyền đều đặn.
- background-size: contain; cố gắng lấy chiều dài nhất có thể, miễn là không bị che khuất, cắt xén thì mới lấy
- background-size: cover chap nhan bi che luon
- background-origin: tương tự như background-clip;
- background-origin: padding-box;
- background-origin: border-box;
- background-origin: content-box;
- background-position: bottom right; vị trí (giúp tùy chỉnh được vị trí của ảnh nền trong css);
- background-position: bottom center; (căn giữa).
+ center: căn giữa.
- background-position: 50px; từ mép trở vô trong.
- background-position: top 20px right 20px;
- background-position: 30px 50px; 30 từ chìu ngang, 50 từ trên dịch xún
vd: background-image: linear-gradient(180deg, #333, #ccc)
cách sr trong suốt: star png

-----------------------------------------------------------------

*cú pháp shorthand: 
có thể gọp chung các thuộc tính sau đây:
background-image: url(https://tse2.mm.bing.net/th?id=OIP.BZFYMEFqsd5RvV6wUB8HUQHaEK&pid=Api&P=0&h=220);
                background-repeat: no-repeat;
                background-position: center; 
                background-size: contain;

background: url(https://tse2.mm.bing.net/th?id=OIP.BZFYMEFqsd5RvV6wUB8HUQHaEK&pid=Api&P=0&h=220) no-repeat center / contain;

-----------------------------------------------------------------

*CSS Functions(hàm trong css);
. var() : học trong đặt biến css.
. linear-gradient()
. rgba()
. rgb()
. calc()
. attr()

 width: calc(80% + 20%);
 background: rgb(209, 178, 22);
 attr(): thuộc tính của thẻ html
 <a href="https://fullstack.edu.vn/">trang dạy học lập trình</a>
 (để cập nhật đường link dẫn đến trang dạy học lập trình thì làm như sau): 
 - sử dụng lớp giả 
 - attr: sẽ lấy được giá trị của <a href></a>
cách đẩy link: 
 .box::after {
                content: attr(data-title);
            }

            a::after {
                content: " (" attr(href) ")";
            }
 
    <div class="box" data-title="Đây là box màu hồng"></div>

    <a href="https://fullstack.edu.vn/">trang dạy học lập trình</a>

- <div class="box" title="Đây là box màu hồng"></div> : hiện ra chữ bé bé (ẩn ẩn, dí chuột vào nó sẽ hiện ra)

-----------------------------------------------------------------

* CSS pseudo-class: lớp giả.
- bao h cũng có dấu 2 chấm ở trước lớp giả.
:root (tham chíu tới chính phần tử gốc của file html là thẻ bao gồm toàn bộ tài liệu <html></html>)
:hover (lấy ví dụ là h1)
h1:hover {
    color: red;  --> nó chỉ hiện khi chúng ta di chuột vào mà thôi.
}
:active (bấm chuột vào sẽ kích hoạt thuộc tính màu sắc)
:first-child (đứa con đầu tiên: tập hợp thẻ li là con thk "ul").

            li:first-child {
                color: red;
                font-size: 40px;
            }
:last-child (cuối thoai).

-----------------------------------------------------------------

*phần tử giả trong css.
::before
::after
::first-letter (kí tự đầu tự đầu tiên màu gì (kích cỡ bao nhiêu).)
::last-line (dòng đầu tiên) <br /> :xuống dòng.
::selection (sự lựa chọn de chuột và bôi thì nó ms hiện ra màu).
  h1::selection {
                background-color: violet;
                color: #fff;
            }
*lưu ý: nếu bỏ h1 đi thì nó sẽ selec toàn bộ html

-----------------------------------------------------------------

*Thuộc tính vị trí tuyệt đối(CSS Position: Absolute).

- miêu tả: có một lớp màu trắng hiện ra đề lên website khi chúng ta dí chuột lên biểu tượng nào đó.

Relative:  vị trí tương đối (kh bị phụ thuộc vào đối tượng nào khác, lấy chính vị trí nó đang đứng, phụ thuộc vào chính nó, nó đứng im tại chỗ luôn)

 h1 {
    position: relative;
    top: 100px;
    left: 100px;
    }
*lưu ý: top, left chỉ hoạt hoạt động khi có position thoi.
Absolute: tuyệt đối (phụ thuộc vào thuộc tính thẻ cha gần nhất có thuộc tính "Position để làm gốc tọa độ)
Fixed: vị trí phụ thuộc vào khung trình duyệt
Sticky: kh khuyến cáo sử dụng vì chưa được hỗ trợ

- nếu muốn hàng nào trong li có màu thì dùng:  
li:nth-of-type(2) {
    color: violet;
}

- nếu muốn cột nào trong item có màu nào thì dùng
.feature-item:nth-child(...) {
    background-color: màu
}

- để phủ mờ mờ một phần trang web khi thẻ con xuất hiện thì: có chú thích trong đoạn code: đoạn cha, con.

-----------------------------------------------------------------

*THUỘC TÍNH POSITION: Fixed (CSS Position: Fixed).
- mô tả: khi kéo lên kéo xuống header vẫn đứng yên thì sử dụng: "Fixed"
+ để phân biệt thk nào sử dụng fixed và thk nào sử dụng absolute: khi thấy 1 đối tượng phụ thuộc vào 1 đối tượng khác trên html dùng absolute
+ ai thuộc cửa sổ trình duyệt thì sử dụng: Fixed.
code mẫu: 
.header {
    width: 100%;
    height: 42px;
    background-color: #333;
    position: fixed;
}

-----------------------------------------------------------------

*STICKY (thương hiệu ms dùng th, kh nên sử dụng).
- để viết chữ trên thanh "h1" đè lên background thì sử dụng: 
 h1 {

    padding: 0 16px;
    color: #fff;
    background-color: #333;
    
    /* để thanh background-color dừng lại trên top. 
    position: sticky;
    position: -webkit-sticky;
    top: 0;
    }

-----------------------------------------------------------------

31. KỸ THUẬT XÂY DỰNG LAYOUT (FLEXBOX). (THUỘC TÍNH FLEXBOX TRONG CSS).

- Tạo ra được những giao diện web và bố cục trên website của bạn
+ flex container: là thẻ chứa
+ flex item: 3 thẻ con trực tiếp của thẻ chứa.
+ trục main axis(ngang): gồm main star và main end (2 thk này quyết định chiều của code) và trục cross axis(dọc): gồm cross star và cross end.
+ main size: kích thước flex item.
+ cross size: kích thước flex item.
(mọi thằng có thể thay đổi)
* sử dụng css để thay đổi điểm đầu, điểm cuối, phương hướng các kiểu.

-----------------------------------------------------------------

32. NHỮNG THUỘC TÍNH CSS SỬ DỤNG FLEXBOX.
-----------------------------------------------------------------
- display: flex | inline-flex (ngang, dọc)
+ quyết định các bạn có sử dụng layout flexbox hay k
+ để tạo ra flex container và flex item --> sử dụng display

-----------------------------------------------------------------

- flex-direction: row  | column (ngang, dọc) (column-reverse: đảo ngược lại)
+ thay đổi phương hướng của main axis
-----------------------------------------------------------------
- flex-wrap: nowrap | wrap | wrap-reverse (xuống dòng)
+ tùy chọn giá trị wrap để mà nó xuống dòng
+ wrap-reverse: đảo chìu của cross-star, cross-end.
-----------------------------------------------------------------
- flex-basis: <length>
+ xét kích thước cho thk main size phụ thuộc trục chính (main axis)
-----------------------------------------------------------------
- justify-content (cha): flex-start | flex-end | center | space-between(cách bên trong k cách bên lề) | space-around(cách bên lề = 1/2 lần bên trong) | space-evenly(cách bên trong và bên lề bằng nhau)
-----------------------------------------------------------------
+ căng được những cái flex-item thoe phương hướng của main axis trái, phải, giữa.
nếu nằm dọc: căng lên trên, giữa, xuống
-----------------------------------------------------------------
- justify-self(con): flex-start | flex-end | center
+ xét cha r thì k cần xét cho thk con.
-----------------------------------------------------------------
- align-content: flex-start | flex-end | center
+ dùng để xét thằng flex-item.
+ cùng phương hướng thk cross axis tương tự cách diễn giải thk justify-content
+ nếu cross axis nằm dọc thì: flex item xét lên trên, nằm giữa theo chiều ngang và xún dưới.
+ nếu cross axis nằm ngang thì: ngược lại.
-----------------------------------------------------------------
- align-self: flex-start | flex-end | center.
+ dùng để xét thk flex-item
-----------------------------------------------------------------
- flex-grow: <number> (nở ra, lớn lên)
+ thay đổi kích thước của thk main-size (phụ thuộc theo thk main axis)
-----------------------------------------------------------------
- flex-shrink: <number> (nhỏ lại)
-----------------------------------------------------------------
- flex: <number> (shorthand): cú pháp viết ngắn
+ 3 thk: flex-basis, flex-grow, flex-shrink.
-----------------------------------------------------------------
- order: <number> : quyết định thứ tự của thằng flex-item: thk nào hiển thị trước, thk nào sau, bth thì sẽ là mặc định, nếu
can thiệp vào thì sử dụng: order
-----------------------------------------------------------------
- flex-flow: cách viết gộp của flex-direction và flex-wrap
-----------------------------------------------------------------
33. Học Flexbox CSS qua ví dụ | Flexbox CSS | Flexbox layout | Flexbox example | Flexbox trong CSS.
- đầu tiên xác định được flex-container va flex-item trước

-------------------------------------------------------------------------------------------------------------
32. Một số lưu ý khi sử dụng câu lệnh flex

- justify-content: space-between; #chỉ cách giữa các item chứ k cách 2 đầu.
- justify-content: space-around; #cách giữa với cách lề luôn nma cách khác size nhau. 
- justify-evenly: cách đều tất cả trong và ngoài bằng nhau.
- wrap: xuống dòng, wrap-reverse: đổi chiều của trục cross start, end
- align-self: flex-end; có chức năng sử dụng cho chính các item cá nhân.
+ có chức năng đảo chìu từ dưới lên. (flex-start)

/*để các cột lớn lên 1 chút thì dùng pp sau*/
@keyframes growth {
    /* opacity: từ 0 -> 1 để nó hiện dần dần lên */
    from {
        opacity: 0; 
        height: calc(var(--percent) - 50%);
    }
    to {
        opacity: 1;
        height: var(--percent);
    }
}

-------------------------------------------------------------------------------------------------------------
33. (Flexbox nâng cao)/ Liên hệ Flex model với các thuộc tính Flexbox trong CSS.
- bổ sung cách để nhận diện những flex có thể dùng cho thằng nào: rõ nét nhất, khó chết mịa luôn.
*Luôn luôn nhớ: chúng ta chỉ là hạt cát trên sa mạc cằn cõi thôi.
- 2 thành phần chính: flex-container, flex-item
flex-item: phụ thuộc vào trục main-axis.
main axis: đếm từ trái va phải.

-------------------------------------------------------------------------------------------------------------
34. liên hệ flexbox model các thuộc tính flexbox trong
muốn di chuyển 3 ông item sát lên trên đầu trục cross axis
sử dụng cross-axis.


- nhầm lẫn justify-content với lại align-item để căn trái, phải, giữa.
+ main axis: justify-content.
+ cross axis: align-item.

*TRANG WEB ĐỂ NHẬN BIẾT FLEXBOX:
Flexbox-playground

-------------------------------------------------------------------------------------------------------------
35. CSS BEM LÀ GÌ? đặt tên css class theo tiêu chuẩn BEM.
#BEM: TIÊU CHUẨN BEM (QUAN TRỌNG CHO MẤY THẰNG GÀ LẬP TRÌNH).
- là tiêu chuẩn đặt tên class khi viết CSS

## ý nghĩa:
- viết tắt của: BLock Element Modifier
- Block: Khối(tạo thẻ cha trước)
- Element: Thành phần trong khối. (thẻ con)
(sau khi mà có 2 thằng bl và ele thì để hiểu hơn ý nghĩa gì thì thêm modifier bằng cách thêm class vào bl và ele để biểu diễn nghĩa)
- Modifier: bổ sung ý nghĩa cho 'Block' hoặc 'Element'(ví dụ như biểu hiện ý nghĩa thành công hay thất bại)

## Tại sao phải dùng BEM?
- Mỗi người đặt một kiểu.
- Members đặt class trùng nhau, CSS đè lên nhau.

## Cú pháp:
- .block (thể hiện class trong block)
- .block__element (thể hiện ele và thẻ chứa nó)

- .block--modifier (dùng class cho thk block)
- .block__element--modifier. (dùng class cho thk block chứa element)

## Tính ứng dụng: 
- Xây dựng layout website.
- xây dựng thành phần trên website.

## Ưu điểm:
- tính rõ ràng
- tái sử dụng dễ dàng (kh bao h sợ trùng class)
- giúp cả team làm việc với nhau dễ dàng.
- tính module, không lo CSS của class này ảnh hưởng lên CSS của class khác.

## Nhược điểm:
- Tên class dài
- Một số người cho là xấu

## Khi nào dùng BEM là phù hợp?
- dự án nhiều Members
- Dự án lớn, số lượng pages nhiều hoặc số lượng các thành phần trên giao diện nhiều

## Thực hành:
- làm button
    - Enabled: Pointer, hover effect.
    - Disabled: Arrow, no effect. 
- làm message
- làm 1 thành phần trên website.

-------------------------------------------------------------------------------------------------------------
36. sử dụng BEM để tạo buttons (ứng dụng của BEM trong CSS).

*Một số lưu ý để nhớ khi code:
- list-style: none; (loại bỏ dấu gạch ngang).
- text-decoration: none; (bỏ dấu gạch ngang , trang trí trên văn bản).
- text-decoration: underline; (gạch dưới văn bản)
- text-decoration: overline; (gạch chân phía trên của văn bản)
- text-decoration: line-through; (gạch ngang văn bản, (còn được gọi là strike-through)

-------------------
display: inline-block;
- inline: sẽ được hiển thị trên cùng 1 dòng với các phần tử khác, giống như một phần tử 'inline'.
- block: có chiều rộng và chiều cao tùy chỉnh (thiết lập với thuộc tính width và height), và các thuộc tính margin, padding
có thể được áp dụng xung quanh nó, tương tự như phần tử 'block'(như '<div>' or '<p>')
- background-color: transparent; (màu trong khung button trong suốt).
- border-radius: 50px; bo tròn các góc với khẩu độ là 50px.

-------------------
-/* nếu 2 nút cạnh nhau ta sử dụng thuộc tính này: sẽ CSS cho 2 btn ở đằng sau đứng cạnh thằng trước chỉ áp dụng cho 2 thằng sau nhìn thấy thk trước th */
.btn + .btn { 
    margin-left: 16px;
}

- Enabled: (nút có thể bấm vào được)
Pointer: con trỏ (sử dụng câu lệnh: cursor: pointer; mục đích: để hiện thị bàn tay)
hover effect: (giảm đi màu sắc khi de chuột vào)
câu lệnh: .btn:hover {
            opacity: 0.8;
        }
- transition: opacity 0.2s ease; (hiệu ứng cho thằng opacity)

- .btn--disabled: một khi có nút này thì không thể bấm được nữa.
code: 
.btn--disabled {
    opacity: 0.5 !important;
    /* để bỏ pointer */
    cursor: default;
}

- min-width: xét chìu ngang nhỏ nhất.
- max-height: chiều cao lớn nhất.

------------------------------------------------------------------------------------------------
37. Sử dụng BEM tạo Toast Message UI: hiện thông báo ngắn gọn và tạm thời hiển thị trên giao diện người dùng trong các ứng 
dụng di động và web. trược từ góc màn hình vào và sau và giây nó lại ẩn đi or có dấu x nhấn dô nó sẽ ẩn đi.

- cách tìm icon đúng sai.
search: font awesome cdn sau đó vào fontwesome.com/icon
- border-radius: 2px; (để tạo góc bo tròn cho các phần tử html)
- border-left: 4px solid; (solid: tạo nét liền phía bên trái).
- box-shadow: 0 5px 8px rgba(0, 0, 0, 0.08); trong CSS được sử dụng để thêm một bóng đổ (shadow) cho phần tử HTML.
Ý nghĩa cụ thể của từng giá trị là:
1/ 0: Giá trị đầu tiên là offset-x, chỉ định khoảng cách của bóng đổ theo chiều ngang. Giá trị 0 nghĩa là bóng đổ sẽ không di chuyển theo chiều ngang, nằm ngay dưới phần tử.
2/ 5px: Giá trị thứ hai là offset-y, chỉ định khoảng cách của bóng đổ theo chiều dọc. Ở đây, 5px nghĩa là bóng đổ sẽ được đặt cách phần tử 5 pixel theo chiều dọc, xuống phía dưới.
3/ 8px: Giá trị thứ ba là blur-radius, chỉ định độ mờ của bóng đổ. 8px nghĩa là bóng sẽ có một độ mờ tương đối lớn, làm cho bóng đổ trông mềm mại và mờ hơn.
4/ rgba(0, 0, 0, 0.08): Giá trị cuối cùng là màu sắc của bóng đổ, sử dụng định dạng rgba (red, green, blue, alpha). Ở đây, màu đen (rgb(0, 0, 0)) với độ trong suốt 0.08, làm cho bóng đổ trông rất nhạt và mờ.

- font-size: 24px; (làm tăng cỡ chữ, icon...)
- font-weight: 600; (thiết lập độ dày của phong chữ).
- boder-color: (làm cho thanh boder có màu sắc.)
- line-height: 1.6; (là một thuộc tính trong CSS được sử dụng để điều chỉnh khoảng cách giữa các dòng trong một đoạn văn bản.)

- để chuyển sang góc phải ở trên thì sử dụng: 
#toast {
    position: fixed;
    top: 32px;
    right: 32px;
}

Thuộc tính transform: translateX(calc(100% + 32px)); trong CSS được sử dụng để dịch chuyển một phần tử theo chiều ngang (trục X) dựa trên một giá trị tính toán kết hợp giữa phần trăm (%) và đơn vị pixel (px).
----------------------
- Hiệu ứng animation trượt từ phải vào:
vd: 
@keyframes slideInleft {
    from {
        opacity: 0; //đầu tiên phần tử sẽ trong suốt.
        transform:translateX(calc(100% + 32px)); //dịch theo chiều từ phải vào.
    }
    to {
        opacity: 1; //phần tử sẽ hoàn toàn hiển thị.
        transform: translateX(0);
    }
}
- kèm theo hiệu ứng quay trở lại trạng thái ban đầu.

@keyframes fadeOut {
    to {
        opacity: 0;
    }
}

- câu lệnh để thêm vào mảng chính:
animation: slideInleft ease .3s /*tốc độ đi ra từ phải ra*/, fadeOut linear 1s 3s (mờ dần từ 1 -> 3s) forwards (dừng lại điểm cuối của animation);

---------------------------------
- bắt đầu code dự án: file base là code những cấu hình chung
main là code những thành phân riêng.
---------------------------------
- Reset CSS và sử dụng Reset CSS: khi chưa CSS thì nó sẽ mặc đinh là 8 pixel, mỗi trình duyệt nó sẽ khác nhau, nên khi code thì sử dụng CSS để chúng có quy chuẩn.
- normalize: giao diện reset css.(css lại các giao diện thẻ html trở lại mặc định).
+ có chức năng là: cho chúng ta biết được các giao diện tùy chọn có trên giao diện wed của chúng ta.
---------------------------------
42. Dựng CSS base | thực hành xây dựng Base CSS cho website.
1rem = 62.5% = 10px tương tự 1.2 = 12px
-------
cách để chỉnh font chữ: google roboto font.
---------------------------------
43. Dựng khung web | tạo layout cho web.
- đầu tiên: làm thẻ chứa toàn bộ web-site
- tiếp theo: navbar -> header -> container -> footer
---------------------------------
44.
html: 
display: block; giúp đặt được chiều ngang chiều dọc trong css, giúp kế thừa chiều ngang của thẻ chứa nó.
- để mất đi chấm chấm đen đen ở trước của các item: list-style: none;
- display: inline-block; giữ lại thuộc tín block nhưng nằm trên 1 hàng. (sử dụng khi có nhiều phần tử với nhau).
- display: flex; sử dụng khi để tất cả các phần tử nằm trên cùng 1 hàng.
- nhấn nút: alt và nút tiến để đưa phần tử vào trong class.
- cách để tách tất cả các chữ đều nhau dùng: margin.
- khi chưa css: padding-left thì mặc định nó sẽ cách phía bên trái 40px.
- cách làm gách ngang giữa 2 chữ:
--------
- chức năng grid { mặc định chiều ngang của nó là 1200px nếu màn hình lớn hơn thì nó sẽ thụt vào phía bên trong.
                width: 1400px; /*nếu thêm > 1200px thì nó sẽ co nhỏ lại và cách ra 2 khoảng đầu*/
                /*chiều ngang tối đa là 100%*/
                max-width: 100%; 
                margin: 0 auto;
}
- margin: 0 auto; giúp căng giữa các item với nhau.
--------
ĐỂ LÀM GẠCH NGANH "|" GIỐNG TRÊN SHOPEE THÌ SỬ DỤNG THUỘC TÍNH SAU ĐÂY.
- đầu tiên vào thẻ <li> vào cửa hàng </li> thêm vào 1 cái monifier.
code web:
.header__navbar-item--separate::after {
    content: "";
    display: block;
    position: absolute;
    width: 1px; /*cách 1 để tạo ra thanh gạch | */
    height: 12px; /*kích thước chìu dọc của thanh là 12px*/
    background-color: #fb9086;
    /* border-left: 1px solid #fb9086;  //cách 2 để tạo gạch ngang. */
    right: -10px;
    top: 50%;
    transform: translateY(-50%); /*điều này có nghĩa là giảm kích thước chiều cao đi còn 6px.*/
    /* lưu ý: 1 Bem có thể chèn nhìu monifier vào trong nhá*/
}
----------------------------------
45. Nhúng Font-Icons | Hướng dẫn sử dụng thư viện Font Awesome
- thư viện: Font Awesome.
- di chuột vào làm mờ đi: 
.header__navbar-item:hover,
.header__navbar-item-link:hover {
    color: rgba(255, 255, 255, 0.7);
}
- cursor: text; //bỏ đi bàn tay.

----------------------------------
47. Hướng dẫn css cho mã QR | Header QR code CSS.
- cách để đo nội dung ẩn.

.header__qr-link:first-child { /*css cho thành phần đầu tiên*/
hoặc: .header__qr-link:nth-child(1) { /*css cho thành phần đầu tiên*/
----------------------------------
47.
để nối 2 cái Variable lại với nhau thì sử dụng thuộc tích ::before {}
vd: 
.header_qr::before { /*tạo một lớp mói bằng lớp QR để thực hiện bắt cầu*/
    position: absolute; /*lớp màu trắng hiện ra trên website khi chúng ta dí chuột.*/
    left: 0;
    top: -15px;
    width: 100%; /*chiều ngang bằng chính thằng QR*/
    height: 20px;
    content: "";
    display: block;
    /* background-color: red; thành trong suốt */
}
---> tạo 1 khuôn mới có chiều ngang = với QR và chiều dọc 20px.

-----------------------
/*Animation*/
@keyframes fadeIn { /* chuyển động*/
    from {
        opacity: 0; /*độ trong suốt = 0 để bé ns ẩn đi*/
    }
    to {
        opacity: 1;
    }
}
thực hành: animation: fadeIn ease-in 0.2s; // 0.2s là thời gian phản hồi

------------------------
- Miếng boder đệm bao quanh bên ngoài:
vd: 
border: 1px solid #D3D3D3;
------------------------
- muốn để 2 thằng cùng có khai báo là span cùng xuống dòng thì sử dụng: display: block; cho từng thằng.
- để ảnh kh bị méo: object-fit: contain;
- di chuột vào nó sẽ đổi từ màu đậm sang nhạt hơn: 
code: 
.header__notify-item::hover {
    background-color: #f1f1f1;
}
-------------------------
//màu nhạt hơn.
color: var(--text-color);
-------------------------
//chiều cao dòng của nó:
line-height: 1.4rem; (rem: pixel) để điều chỉnh một dòng sao cho độ rộng khoảng cách dòng xuống hàng nhỏ hoặc lớn.
-------------------------
nếu muốn tràng viền luôn thì use: weight: 100%.
nếu muốn căn chỉnh nằm giữa: display: flex; và dùng thuộc tính: text-align: center;
cách thứ 2: display: flex;  và dùng: justify-contain: center;
-------------------------
cursor: text; (kh hiện ra con trỏ chuộc nữa mà hiện chữ I mục đích dùng để bôi đen copy)
để bình thường chỉ hiển thị chuột: user-select: none;
-------------------------
di chuột vào hiện ra (animation).
-------------------------
/* thuộc tính: transform-origin: để di chuyển độ nở của item*/
    transform-origin: top right;
    transform-origin: 90% right;

-------------------------

/*animation cho phần thông báo*/
@keyframes fadeIine { /* chuyển động*/
    from {
        opacity: 0; // mờ từ từ lên.
        transform: scale(0); /*độ trong suốt = 0 để bé ns ẩn đi*/
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}
----------------------------
Design: arrow.
cách làm: 
- chỉ cần tạo ra 1 thẻ html kh cao dài = 0 và cho boder dày lên.
- tese chức năng: jsfiddle.net
----------------------------
- CÁC CHỨC NĂNG CĂN GIỮA:
(display: flex).
margin: auto;
justify-content: center;
text-align: center;
display: block;