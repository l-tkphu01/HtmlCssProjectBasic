*Cần học được gì và làm được gì trong khóa học (HTML_CSS_JS).

- xây dựng được giao diện website
- phân tích giao diện website
- đặt tên class theo tiêu chuẩn BEM
- xây dựng layout với Flexbox
- làm hiệu ứng với animation
- xây dựng giao diện responsive (dạo diện thích ứng, tạo ra giao diện trải nghiệm tốt cho người dùng khi truy cập vào nhìu
loại thiết bị khác nhau, ví dụ về thích ứng với điện thoại, máy tính bảng)
- rất nhiều các kĩ năng nâng cao khác.

- sử dụng rất rộng rãi trong các giao diện website.
-----------------------------------------------------------------
*HTML_CSS là gì? | ví dụ trực quan về HTML và CSS.

HTML là chữ viết tắt của "Hypertext Markup Language" (ngôn ngữ đánh dấu siêu văn bản). Nó giúp cho người dùng tạo và cấu trúc các thành phần trong trang web hoặc ứng dụng
phân chia các đoạn văn, heading (phần mở đầu), links, blockquotes (trích dẫn hình ảnh, video), vv.... (nguyên vật liệu, khung sườn để xây nhà).

CSS là ngôn ngữ tạo (phong cách) cho trang web - Cascading Style Sheet language. Nó dùng để tạo phong cách và định kiểu cho những yếu tố
được viết dưới dạng ngôn ngữ đánh dấu, như HTML.

-----------------------------------------------------------------

*Dev - tools.

- Element: chứa tất cả các phần tử của chúng ta (những phần tử HTML).
- stype: hiện thị ra những thuộc tính CSS (để tạo phong cách cho trang web).
- console: khi dùng để code javascrip 
- sources: để chúng ta biết được là chúng ta đã sử lí được những nguồn tài nguyên nào.
- nextwork: những tài nguyên khi ta tải từ những tap bên ngoài ví dụ (hình ảnh,...)
- toggle device toolbar: chuyển đổi mô phỏng trang web đó sang điện thoại (laptop)...để code phù hợp cho màn hình từng đt.
những website hình mây: là những website bên ngoài.

-----------------------------------------------------------------

*cấu trúc cơ bản của một file (html): 

- page ruler: đo kích thước của một thành phần nào đó trong trang web của chúng ta.
- khi trong thẻ body "<" sẽ lỗi vì nhận nhầm là thẻ mở.

-----------------------------------------------------------------

*CÁCH SỬ DỤNG CSS TRONG THẺ HTML.

có 3 cách: Internal (bên trong), External, Inline

Internal: (bên trong thẻ stype): bao gồm color, font-size, 
- đặt bất cứ đâu cũng được nma lưu ý kh được đặt ở giữa mấy cái chữ là được.
- sử dụng một cặp thẻ style đặt trong html của chúng ta và viết css vào đó
External: 
- để bỏ liên kết ra bên ngoài hàm (main.css) dùng External. dẫn liên kết vào index.html
để kiểm tra main.css đã được liên kết với tệp html chưa nhấn chuột phải chọn kiểm tra sau đó nhấn vào source.
Inline:
- thêm màu sắc trực tiếp vào các thẻ ví dụ <h1 Style<>phú đẹp trai quá trời</h1>

-----------------------------------------------------------------

*KHÁI NIỆM ID VÀ CLASS TRONG CSS SELECTORS
- cách để gọi được tới những cái element trong thẻ html
- lưu ý: khi học javascrip sử dụng 2 id trung nhau sẽ kh select được.

-----------------------------------------------------------------

*XÉT SỰ ƯU TIÊN TRONG CSS
priority?

1. Internal, External? : kh ai ưu tiên hơn cách nào(ông nào được gọi sau thì ông đó ms hơn và đc ưu tiên hơn)
2. Inline - 1000   những css này: cái nào mà được gọi nhiều điểm hơn thì sẽ được ưu tiên hơn.
3. #id - 100
4. .class - 10
5. tag - 1 <là những thẻ h1 - h6>
6. Equal specificity?
- có nghĩa là gọi heading-id... lại 1 lần nữa (thk nào viết trước, lớn hơn thì sẽ được ưu tiên).
7. Universal (0 điểm) selector and inherited (kế thừa: thừa hưởng từ những thk khác)? 0 điểm

important: khi xuất hiện thì đặc biệt ưu tiên ví dụ: 
li { //li: list, ul: unorder list
    color: black !important;
}

*CSS Variable là gì? (kĩ thuật đặc biến trong css).

:root { 
    --text-color: violet; 
}

/* kĩ thuật local */
h1 {
    --my-color: green;
    color: var(--my-color);
}

h2 {
    color: var(--my-color);
}

h3 {
    color: var(--text-color);
}

-----------------------------------------------------------------

*Abolute units? : đơn vị tuyệt đối.
. px: độ phân giải trên màn hình, điểm ảnh trên màn hình.
1px/ css tương ứng với 1 điểm ảnh thực trên màn hình độ phân giải thấp, đối với độ phân giải cao, 1 px tương ứng với nhiều 
điểm ảnh thực hơn 
. priority
. cm
. mm
. inch
. pc

-----------------------------------------------------------------

*Relative units? : đơn vị tương đối
. % : phụ thuộc vào thử chứa nó.
. rem: phụ thuộc thẻ html
. em: phụ thuộc vào thẻ gần nhất chứa nó (lần lượt duyệt qua các thẻ div, body, html, thẻ nào có thuộc tính font-size).
nên là khi ta thay đổi html: 1000px đi nữa cx không thay đổi đơn vị 1em.

-----------------------------------------------------------------

*khuyến khích sử dụng: rem (vì nó phụ thuộc vào html dễ kiểm soát hơn)
. vw: viewport - width: chiều ngang.
. vh: viewport - height: chiều dọc.
. vmin
. vmax
. ex
. ch

+ muốn chiều rộng và chiều ngang luôn bằng với màn hình thì dùng vw, vh.
+ muốn chiều ngang tỉ lệ với một đối tượng chứa nó thì sử dụng %

*Lưu ý: khi sử dụng màu sắc để css cho các phong chữ đặc nó trong <style>
</style>


*để tạo ô màu(hình vuông): 
<style>
            .box {
                width: 100px;
                height: 100px;
                background-color: red;
            }
 </style>

//phải có một thẻ div trong phần thân body:
<div class="box"></div>

-----------------------------------------------------------------

*thuộc tính Padding trong CSS|CSS padding.


+ các đơn vị hôm qua được học:

px: pixel
rem:
em:
vw: chiều ngang
vh: chiều dọc

 display: flex;
 align-items: center;
 justify-content: center;  
- căn giữa chữ ra cái hình màu.

-----------------------------------------------------------------

*sơ đồ khối của element trong html
+padding: đệm
+boder: lớp viền ngoài cùng ôm element
margin: 

 /* padding-top: 10px;
    padding-right: 10px;
    padding-left: 10px;
    padding-bottom: 10px; */
    có thể viết tắc là: padding: 10px 12px 8px 6px (trên, phải, dưới, trái);
+ chức năng các thứ đều tương tự.
+dashed: nét đứt.
+solid: nét liền.
+inherit: thừa kế
+initial: giá trị ban đầu
+none: (không xét boder, còn tất cả những thk khác thì xét boder bình thường)

*cách viết tắt của boder:
border-width: 10px = border-top-width: 10px
                   = boder-right-width: 10px
                   = boder-bottom-width: 10px
                   = border-left-width: 10px

-----------------------------------------------------------------

* Thuộc tính margin trong CSS.(TƯ DUY SỬ DỤNG CSS MARGIN)
- muốn tạo ra khoảng cách đẩy box2, box3 xa nhau ra
-float-left: giúp cho tất cả các element nằm trên một mặt ngang: 

-----------------------------------------------------------------

*CSS box-sizing(tính ứng dụng của box-sizing): được sử dụng để kiểm soát cách kích thước của phần tử(element) được tính toán
quyết định padding và border.

-box-sizing: unset; có tác dụng hủy đi các thao tác vừa đề cập.

-----------------------------------------------------------------

*CSS background-clip(thuộc tính background-clip)
- giúp kiểm soát phạm vi vẽ nền của phần tử tương ứng với border và padding thì sẽ có giới hạn tương xứng

-----------------------------------------------------------------

*CSS background-image.
- background-size: 100px; (xét theo chìu ngang(width))còn chìu dọc thì auto chỉnh lại size kích thước của ảnh.
- background-repeat: no-repeat; mất đi thuộc tính lặp lại.
- background-repeat: repeat-x; lặp chiều dọc
- background-repeat: repeat-y; bỏ lặp.
- background-image: url(--thêm ảnh link vào đây--); link nào trước thì hiện trước.
- background-image: linear-gradient(--thêm tham số vào--); dải màu truyền đều đặn.
- background-size: contain; cố gắng lấy chiều dài nhất có thể, miễn là không bị che khuất, cắt xén thì mới lấy
- background-size: cover chap nhan bi che luon
- background-origin: tương tự như background-clip;
- background-origin: padding-box;
- background-origin: border-box;
- background-origin: content-box;
- background-position: bottom right; vị trí (giúp tùy chỉnh được vị trí của ảnh nền trong css);
- background-position: bottom center; (căn giữa).
+ center: căn giữa.
- background-position: 50px; từ mép trở vô trong.
- background-position: top 20px right 20px;
- background-position: 30px 50px; 30 từ chìu ngang, 50 từ trên dịch xún
vd: background-image: linear-gradient(180deg, #333, #ccc)
cách sr trong suốt: star png

-----------------------------------------------------------------

*cú pháp shorthand: 
có thể gọp chung các thuộc tính sau đây:
background-image: url(https://tse2.mm.bing.net/th?id=OIP.BZFYMEFqsd5RvV6wUB8HUQHaEK&pid=Api&P=0&h=220);
                background-repeat: no-repeat;
                background-position: center; 
                background-size: contain;

background: url(https://tse2.mm.bing.net/th?id=OIP.BZFYMEFqsd5RvV6wUB8HUQHaEK&pid=Api&P=0&h=220) no-repeat center / contain;

-----------------------------------------------------------------

*CSS Functions(hàm trong css);
. var() : học trong đặt biến css.
. linear-gradient()
. rgba()
. rgb()
. calc()
. attr()

 width: calc(80% + 20%);
 background: rgb(209, 178, 22);
 attr(): thuộc tính của thẻ html
 <a href="https://fullstack.edu.vn/">trang dạy học lập trình</a>
 (để cập nhật đường link dẫn đến trang dạy học lập trình thì làm như sau): 
 - sử dụng lớp giả 
 - attr: sẽ lấy được giá trị của <a href></a>
cách đẩy link: 
 .box::after {
                content: attr(data-title);
            }

            a::after {
                content: " (" attr(href) ")";
            }
 
    <div class="box" data-title="Đây là box màu hồng"></div>

    <a href="https://fullstack.edu.vn/">trang dạy học lập trình</a>

- <div class="box" title="Đây là box màu hồng"></div> : hiện ra chữ bé bé (ẩn ẩn, dí chuột vào nó sẽ hiện ra)

-----------------------------------------------------------------

* CSS pseudo-class: lớp giả.
- bao h cũng có dấu 2 chấm ở trước lớp giả.
:root (tham chíu tới chính phần tử gốc của file html là thẻ bao gồm toàn bộ tài liệu <html></html>)
:hover (lấy ví dụ là h1)
h1:hover {
    color: red;  --> nó chỉ hiện khi chúng ta di chuột vào mà thôi.
}
:active (bấm chuột vào sẽ kích hoạt thuộc tính màu sắc)
:first-child (đứa con đầu tiên: tập hợp thẻ li là con thk "ul").

            li:first-child {
                color: red;
                font-size: 40px;
            }
:last-child (cuối thoai).

-----------------------------------------------------------------

*phần tử giả trong css.
::before
::after
::first-letter (kí tự đầu tự đầu tiên màu gì (kích cỡ bao nhiêu).)
::last-line (dòng đầu tiên) <br /> :xuống dòng.
::selection (sự lựa chọn de chuột và bôi thì nó ms hiện ra màu).
  h1::selection {
                background-color: violet;
                color: #fff;
            }
*lưu ý: nếu bỏ h1 đi thì nó sẽ selec toàn bộ html

-----------------------------------------------------------------

*Thuộc tính vị trí tuyệt đối(CSS Position: Absolute).

- miêu tả: có một lớp màu trắng hiện ra đề lên website khi chúng ta dí chuột lên biểu tượng nào đó.

Relative:  vị trí tương đối (kh bị phụ thuộc vào đối tượng nào khác, lấy chính vị trí nó đang đứng, phụ thuộc vào chính nó, nó đứng im tại chỗ luôn)

 h1 {
    position: relative;
    top: 100px;
    left: 100px;
    }
*lưu ý: top, left chỉ hoạt hoạt động khi có position thoi.
Absolute: tuyệt đối (phụ thuộc vào thuộc tính thẻ cha gần nhất có thuộc tính "Position để làm gốc tọa độ)
Fixed: vị trí phụ thuộc vào khung trình duyệt
Sticky: kh khuyến cáo sử dụng vì chưa được hỗ trợ

- nếu muốn hàng nào trong li có màu thì dùng:  
li:nth-of-type(2) {
    color: violet;
}

- để phủ mờ mờ một phần trang web khi thẻ con xuất hiện thì: có chú thích trong đoạn code: đoạn cha, con.

-----------------------------------------------------------------

*THUỘC TÍNH POSITION: Fixed (CSS Position: Fixed).
- mô tả: khi kéo lên kéo xuống header vẫn đứng yên thì sử dụng: "Fixed"
+ để phân biệt thk nào sử dụng fixed và thk nào sử dụng absolute: khi thấy 1 đối tượng phụ thuộc vào 1 đối tượng khác trên html dùng absolute
+ ai thuộc cửa sổ trình duyệt thì sử dụng: Fixed.
code mẫu: 
.header {
    width: 100%;
    height: 42px;
    background-color: #333;
    position: fixed;
}

-----------------------------------------------------------------

*STICKY (thương hiệu ms dùng th, kh nên sử dụng).
- để viết chữ trên thanh "h1" đè lên background thì sử dụng: 
 h1 {

    padding: 0 16px;
    color: #fff;
    background-color: #333;
    
    /* để thanh background-color dừng lại trên top. 
    position: sticky;
    position: -webkit-sticky;
    top: 0;
    }

-----------------------------------------------------------------

31. KỸ THUẬT XÂY DỰNG LAYOUT (FLEXBOX). (THUỘC TÍNH FLEXBOX TRONG CSS).

- Tạo ra được những giao diện web và bố cục trên website của bạn
+ flex container: là thẻ chứa
+ flex item: 3 thẻ con trực tiếp của thẻ chứa.
+ trục main axis(ngang): gồm main star và main end (2 thk này quyết định chiều của code) và trục cross axis(dọc): gồm cross star và cross end.
+ main size: kích thước flex item.
+ cross size: kích thước flex item.
(mọi thằng có thể thay đổi)
* sử dụng css để thay đổi điểm đầu, điểm cuối, phương hướng các kiểu.

-----------------------------------------------------------------

32. NHỮNG THUỘC TÍNH CSS SỬ DỤNG FLEXBOX.
- display: flex | inline-flex (ngang, dọc)
+ quyết định các bạn có sử dụng layout flexbox hay k
+ để tạo ra flex container và flex item --> sử dụng display
- flex-direction: row  | column (ngang, dọc)
+ thay đổi phương hướng của main axis
- flex-wrap: nowrap | wrap | wrap-reverse (xuống dòng)
+ tùy chọn giá trị wrap để mà nó xuống dòng
+ wrap-reverse: đảo chìu của cross-star, cross-end.
- flex-basis: <length>
+ xét kích thước cho thk main size phụ thuộc trục chính (main axis)
- justify-content (cha): flex-start | flex-end | center | space-between | space-around.
+ căng được những cái flex-item thoe phương hướng của main axis trái, phải, giữa.
nếu nằm dọc: căng lên trên, giữa, xuống
- justify-self(con): flex-start | flex-end | center
+ xét cha r thì k cần xét cho thk con.
- align-content: flex-start | flex-end | center